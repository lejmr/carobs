//
// Generated file, do not edit! Created by opp_msgc 4.2 from messages/car.msg.
//

#ifndef _CAR_M_H_
#define _CAR_M_H_

#include <omnetpp.h>

// opp_msgc version check
#define MSGC_VERSION 0x0402
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgc: 'make clean' should help.
#endif

// cplusplus {{
#include <Payload_m.h>
// }}



/**
 * Class generated from <tt>messages/car.msg</tt> by opp_msgc.
 * <pre>
 * packet Car {
 *     @customize(true);
 *     Payload payload[];
 * }
 * </pre>
 *
 * Car_Base is only useful if it gets subclassed, and Car is derived from it.
 * The minimum code to be written for Car is the following:
 *
 * <pre>
 * class Car : public Car_Base
 * {
 *   private:
 *     void copy(const Car& other) { ... }

 *   public:
 *     Car(const char *name=NULL, int kind=0) : Car_Base(name,kind) {}
 *     Car(const Car& other) : Car_Base(other) {copy(other);}
 *     Car& operator=(const Car& other) {if (this==&other) return *this; Car_Base::operator=(other); copy(other); return *this;}
 *     virtual Car *dup() const {return new Car(*this);}
 *     // ADD CODE HERE to redefine and implement pure virtual functions from Car_Base
 * };
 * </pre>
 *
 * The following should go into a .cc (.cpp) file:
 *
 * <pre>
 * Register_Class(Car);
 * </pre>
 */
class Car_Base : public ::cPacket
{
  protected:
    Payload *payload_var; // array ptr
    unsigned int payload_arraysize;

  private:
    void copy(const Car_Base& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const Car_Base&);
    // make constructors protected to avoid instantiation
    Car_Base(const char *name=NULL, int kind=0);
    Car_Base(const Car_Base& other);
    // make assignment operator protected to force the user override it
    Car_Base& operator=(const Car_Base& other);

  public:
    virtual ~Car_Base();
    virtual Car_Base *dup() const {throw cRuntimeError("You forgot to manually add a dup() function to class Car");}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual void setPayloadArraySize(unsigned int size);
    virtual unsigned int getPayloadArraySize() const;
    virtual Payload& getPayload(unsigned int k);
    virtual const Payload& getPayload(unsigned int k) const {return const_cast<Car_Base*>(this)->getPayload(k);}
    virtual void setPayload(unsigned int k, const Payload& payload);
};

class Car : public Car_Base{
  public:
    Car(const char *name=NULL) : Car_Base(name) {}
    Car(const Car& other) : Car_Base(other) {}
    Car& operator=(const Car& other) {Car_Base::operator=(other); return *this;}
    virtual Car *dup() {return new Car(*this);}
    void insertPayload(Payload *payload);
    Payload* popPayload();
};

Register_Class(Car);


#endif // _CAR_M_H_
